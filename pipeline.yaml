apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: app-deploy
spec:
  params:
    - name: git-url
      type: string
      description: url of the git repo for the code deployment.
    - name: git-revision
      type: string
      description: revision to be used from repo of the code for deployment.
      default: "main"
    - name: IMAGE
      type: string
      default: "gcr.io/foo/bar"
    - name: TAG
      type: string
      default: "v1"
    - name: Namespace
    - name: K8S_VARIANT
      type: string
      default: "k8s"
  workspaces:
    - name: shared-workspace
    - name: kubeconfig-dir
  tasks:
    - name: fetch-repository
      taskRef:
        name: git-clone
        kind: Task
      workspaces:
        - name: output
          workspace: shared-workspace
      params:
        - name: url
          value: "$(param.git-url)"
        - name: subdirectory
          value: ""
        - name: deleteExisting
          value: "true"
        - name: revision
          value: "$(params.git-revision)"
    - name: install-dependencies
      taskRef:
        name: npm
        kind: Task
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: ARGS
          value:
            - clean install
      runAfter:
        - fetch-repository
    - name: run-lint
      taskRef:
        name: npm
        kind: Task
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: ARGS
          value:
            - run
            - lint
      runAfter:
        - install-dependencies
    - name: build-test
      taskRef:
        name: npm
        kind: Task
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: ARGS
          value:
            - run
            - build
      runAfter:
        - install-dependencies #run-lint
    - name: unit-test
      taskRef:
        name: npm
        kind: Task
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: ARGS
          value:
            - run
            - test
      runAfter:
        - run-lint
    - name: build-push-image
      taskRef:
        name: buildah
        kind: Task
      runAfter:
        - unit-test
        - build-test
      workspaces:
        - name: source
          workspace: shared-workspace
      params:
        - name: IMAGE
          value: $(params.IMAGE):$(params.TAG)
        - name: FORMAT
          value: "docker"
    - name: check-ui-deployment
      taskRef:
        name: kubernetes-actions
        kind: Task
      params:
        - name: script
          value: |
            kubectl -n $(params.NAMESPACE) describe deployment ui >/dev/null 2>/dev/null
            if [[ $? -eq ]]; then
               printf yes | tee /tekton/results/output-result
            else
               printf no | tee /tekton/results/output-result
            fi
      runAfter:
        - build-push-image
      workspaces:
        - name: kubeconfig-dir
          workspace: kubeconfig-dir
    - name: patch-ui-image
      taskRef:
        name: kubernetes-actions
        kind: Task
      params:
        - name: script
          value: |
            kubectl patch deployment ui --patch='{"spec":{"template":{"spec":{
              "containers":[{
              "name": "ui",
              "image": "$(params.IMAGE):$(params.TAG)"
              }]
            }}}}' -n $(params.NAMESPACE)
      when:
        - input: "$(tasks.check-ui-deployment.results.output-result)"
          operator: in
          values: ["yes"]
      workspaces:
        - name: kubeconfig-dir
          workspace: kubeconfig-dir
    - name: create-deployment
      taskRef:
        name: kubernetes-actions
        kind: Task
      when:
        - input: "$(tasks.check-ui-deployment.results.output-result)"
          operator: in
          values: ["no"]
      params:
        - name: script
          value: |
            kubectl apply -f  config/03-ui
            [[ "$(params.K8S_VARIANT)" == "k8s" ]] && \
            kubectl apply -f  config/04-kubernetes/42-ui-ingress.yaml
            # patch the latest build image
            kubectl patch deployment ui --patch='{"spec":{"template":{"spec":{
            "containers":[{
              "name": "ui",
              "image": "$(params.IMAGE):$(params.TAG)"
              }]
            }}}}' -n $(params.NAMESPACE)
      workspaces:
        - name: manifest-dir
          workspace: shared-workspace
        - name: kubeconfig-dir
          workspace: kubeconfig-dir

